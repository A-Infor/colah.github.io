<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>colah's blog</title>
        <link>http://colah.github.io/</link>
        <description><![CDATA[]]></description>
        <atom:link href="http://colah.github.io//posts/tags/deep%20learning.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 08 Jul 2014 00:00:00 UT</lastBuildDate>
        <item>
    <title>Conv Nets: A Modular Perspective</title>
    <link>http://colah.github.io/posts/2014-07-Conv-Nets-Modular/</link>
    <description><![CDATA[<h1 id="introduction">Introduction</h1>
<p>In the last few years, deep neural networks have lead to breakthrough results on a variety of pattern recognition problems, such as computer vision and voice recognition. One of the essential components leading to these results has been a special kind of neural network called a <em>convolutional neural network</em>.</p>
<p>At it’s most basic, convolutional neural networks can be thought of as a kind of neural network that uses many identical copies of the same neuron.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> This allows the network to have lots of neurons and express computationally large models while keeping the number of actual parameters – the values describing how neurons behave – that need to be learned fairly small.</p>
<div class="bigcenterimgcontainer">
<img src="img/Conv2-9x5-Conv2Conv2.png" alt="" style="">
<div class="caption">
A 2D Convolutional Neural Network
</div>
</div>
<div class="spaceafterimg">

</div>
<p>This trick of having multiple copies of the same neuron is roughly analogous to the abstraction of functions in mathematics and computer science. When programming, we write a function once and use it in many places – not writing the same code a hundred times in different places makes it faster to program, and results in fewer bugs. Similarly, a convolutional neural network can learn a neuron once and use it in many places, making it easier to learn the model and reducing error.</p>
<h1 id="structure-of-convolutional-neural-networks">Structure of Convolutional Neural Networks</h1>
<p>Suppose you want a neural network to look at audio samples and predict whether a human is speaking or not. Maybe you want to do more analysis if someone is speaking.</p>
<p>You get audio samples at different points in time. The samples are evenly spaced.</p>
<div class="bigcenterimgcontainer">
<img src="img/Conv-9-xs.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>The simplest way to try and classify them with a neural network is to just connect them all to a fully-connected layer. There are a bunch of different neurons, and every input connects to every neuron.</p>
<div class="bigcenterimgcontainer">
<img src="img/Conv-9-F.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>A more sophisticated approach notices a kind of <em>symmetry</em> in the properties it’s useful to look for in the data. We care a lot about local properties of the data: What frequency of sounds are there around a given time? Are they increasing or decreasing? And so on.</p>
<p>We care about the same properties at all points in time. It’s useful to know the frequencies at the beginning, it’s useful to know the frequencies in the middle, and it’s also useful to know the frequencies at the end. Again, note that these are local properties, in that we only need to look at a small window of the audio sample in order to determine them.</p>
<p>So, we can create a group of neurons, <span class="math">\(A\)</span>, that look at small time segments of our data.<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> <span class="math">\(A\)</span> looks at all such segments, computing certain <em>features</em>. Then, the output of this <em>convolutional layer</em> is fed into a fully-connected layer, <span class="math">\(F\)</span>.</p>
<div class="bigcenterimgcontainer">
<img src="img/Conv-9-Conv2.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>In the above example, <span class="math">\(A\)</span> only looked at segments consisting of two points. This isn’t realistic. Usually, a convolution layer’s window would be much larger.</p>
<p>In the following example, <span class="math">\(A\)</span> looks at 3 points. That isn’t realistic either – sadly, it’s tricky to visualize <span class="math">\(A\)</span> connecting to lots of points.</p>
<div class="bigcenterimgcontainer">
<img src="img/Conv-9-Conv3.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>One very nice property of convolutional layers is that they’re composable. You can feed the output of one convolutional layer into another. With each layer, the network can detect higher-level, more abstract features.</p>
<p>In the following example, we have a new group of neurons, <span class="math">\(B\)</span>. <span class="math">\(B\)</span> is used to create another convolutional layer stacked on top of the previous one.</p>
<div class="bigcenterimgcontainer">
<img src="img/Conv-9-Conv2Conv2.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>Convolutional layers are often interweaved with pooling layers. In particular, there is a kind of layer called a max-pooling layer that is extremely popular.</p>
<p>Often, from a high level perspective, we don’t care about the precise point in time a feature is present. If a shift in frequency occurs slightly earlier or later, does it matter?</p>
<p>A max-pooling layer takes the maximum of features over small blocks of a previous layer. The output tells us if a feature was present in a region of the previous layer, but not precisely where.</p>
<p>Max-pooling layers kind of “zoom out”. They allow later convolutional layers to work on larger sections of the data, because a small patch after the pooling layer corresponds to a much larger patch before it. They also make us invariant to some very small transformations of the data.</p>
<div class="bigcenterimgcontainer">
<img src="img/Conv-9-Conv2Max2Conv2.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<div class="floatrightimgcontainer">
<img src="img/Conv2-unit.png" alt="" style="">
</div>
<p>In our previous examples, we’ve used 1-dimensional convolutional layers. However, convolutional layers can work on higher-dimensional data as well. In fact, the most famous successes of convolutional neural networks are applying 2D convolutional neural networks to recognizing images.</p>
<p>In a 2-dimensional convolutional layer, instead of looking at segments, <span class="math">\(A\)</span> will now look at patches.</p>
<p>For each patch, <span class="math">\(A\)</span> will compute features. For example, it might learn to detect the presence of an edge. Or it might learn to detect a texture. Or perhaps a contrast between two colors.</p>
<div class="bigcenterimgcontainer">
<img src="img/Conv2-9x5-Conv2.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>In the previous example, we fed the output of our convolutional layer into a fully-connected layer. But we can also compose two convolutional layers, as we did in the one dimensional case.</p>
<div class="bigcenterimgcontainer">
<img src="img/Conv2-9x5-Conv2Conv2.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>We can also do max pooling in two dimensions. Here, we take the maximum of features over a small patch.</p>
<p>What this really boils down to is that, when considering an entire image, we don’t care about the exact position of an edge, down to a pixel. It’s enough to know where it is to within a few pixels.</p>
<div class="bigcenterimgcontainer">
<img src="img/Conv2-9x5-Conv2Max2Conv2.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>Three-dimensional convolutional networks are also sometimes used, for data like videos or volumetric data (eg. 3D medical scans). However, they are not very widely used, and much harder to visualize.</p>
<p>Now, we previously said that <span class="math">\(A\)</span> was a group of neurons. We should be a bit more precise about this: what is <span class="math">\(A\)</span> exactly?</p>
<p>In traditional convolutional layers, <span class="math">\(A\)</span> is a bunch of neurons in parallel, that all get the same inputs and compute different features.</p>
<p>For example, in a 2-dimensional convolutional layer, one neuron might detect horizontal edges, another might detect vertical edges, and another might detect green-red color contrasts.</p>
<div class="centerimgcontainer">
<img src="img/Conv-A.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>That said, in the recent paper ‘Network in Network’ (<a href="http://arxiv.org/abs/1312.4400">Lin <em>et al.</em> (2013)</a>), a new “Mlpconv” layer is proposed. In this model, <span class="math">\(A\)</span> would have multiple layers of neurons, with the final layer outputting higher level features for the region. In the paper, the model achieves some very impressive results, setting new state of the art on a number of benchmark datasets.</p>
<div class="centerimgcontainer">
<img src="img/Conv-A-NIN.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>That said, for the purposes of this post, we will focus on standard convolutional layers. There’s already enough for us to consider there!</p>
<h1 id="results-of-convolutional-neural-networks">Results of Convolutional Neural Networks</h1>
<p>Earlier, we alluded to recent breakthroughs in computer vision using convolutional neural networks. Before we go on, I’d like to briefly discuss some of these results as motivation.</p>
<p>In 2012, Alex Krizhevsky, Ilya Sutskever, and Geoff Hinton blew existing image classification results out of the water (<a href="http://www.cs.toronto.edu/~fritz/absps/imagenet.pdf">Krizehvsky <em>et al.</em> (2012)</a>).</p>
<p>Their progress was the result of combining together a bunch of different pieces. They used GPUs to train a very large, deep, neural network. They used a new kind of neuron (ReLUs) and a new technique to reduce a problem called ‘overfitting’ (DropOut). They used a very large dataset with lots of image categories (<a href="http://www.image-net.org/">ImageNet</a>). And, of course, it was a convolutional neural network.</p>
<p>Their architecture, illustrated below, was very deep. It has 5 convolutional layers,<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> with pooling interspersed, and three fully-connected layers. The early layers are split over the two GPUs.</p>
<div class="bigcenterimgcontainer">
<img src="img/KSH-arch.png" alt="" style="">
<div class="caption">
From <a href="http://www.cs.toronto.edu/~fritz/absps/imagenet.pdf">Krizehvsky <em>et al.</em> (2012)</a>
</div>
</div>
<div class="spaceafterimg">

</div>
<p>They trained their network to classify images into a thousand different categories.</p>
<p>Randomly guessing, one would guess the correct answer 0.1% of the time. Krizhevsky, <em>et al.</em>’s model is able to give the right answer 63% of the time. Further, one of the top 5 answers it gives is right 85% of the time!</p>
<div class="bigcenterimgcontainer">
<img src="img/KSH-results.png" alt="" style="">
<div class="caption">
Top: 4 correctly classified examples. Bottom: 4 incorrectly classified examples. Each example has an image, followed by its label, followed by the top 5 guesses with probabilities. From <a href="http://www.cs.toronto.edu/~fritz/absps/imagenet.pdf">Krizehvsky <em>et al.</em> (2012)</a>.
</div>
</div>
<div class="spaceafterimg">

</div>
<p>Even some of its errors seem pretty reasonable to me!</p>
<p>We can also examine what the first layer of the network learns to do.</p>
<p>Recall that the convolutional layers were split between the two GPUs. Information doesn’t go back and forth each layer, so the split sides are disconnected in a real way. It turns out that, every time the model is run, the two sides specialize.</p>
<div class="bigcenterimgcontainer">
<img src="img/KSH-filters.png" alt="" style="">
<div class="caption">
Filters learned by the first convolutional layer. The top half corresponds to the layer on one GPU, the bottom on the other. From <a href="http://www.cs.toronto.edu/~fritz/absps/imagenet.pdf">Krizehvsky <em>et al.</em> (2012)</a>
</div>
</div>
<div class="spaceafterimg">

</div>
<p>Neurons in one side focus on black and white, learning to detect edges of different orientations and sizes. Neurons on the other side specialize on color and texture, detecting color contrasts and patterns.<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a> Remember that the neurons are <em>randomly</em> initialized. No human went and set them to be edge detectors, or to split in this way. It arose simply from training the network to classify images.</p>
<p>These remarkable results (and other exciting results around that time) were only the beginning. They were quickly followed by a lot of other work testing modified approaches and gradually improving the results, or applying them to other areas. And, in addition to the neural networks community, many in the computer vision community have adopted deep convolutional neural networks.</p>
<p>Convolutional neural networks are an essential tool in computer vision and modern pattern recognition.</p>
<!---
<div class="centerimgcontainer">
<img src="img/KSH-similar.png" alt="" style="">
<div class="caption">From [Krizehvsky *et al.* (2012)]</div>
</div>
<div class="spaceafterimg"></div>
--->


<h1 id="formalizing-convolutional-neural-networks">Formalizing Convolutional Neural Networks</h1>
<p>Consider a 1-dimensional convolutional layer with inputs <span class="math">\(\{x_n\}\)</span> and outputs <span class="math">\(\{y_n\}\)</span>:</p>
<div class="bigcenterimgcontainer">
<img src="img/Conv-9-Conv2-XY.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>It’s relatively easy to describe the outputs in terms of the inputs:</p>
<p><span class="math">\[y_n = A(x_{n}, x_{n+1}, ...)\]</span></p>
<p>For example, in the above:</p>
<p><span class="math">\[y_0 = A(x_0, x_1)\]</span> <span class="math">\[y_1 = A(x_1, x_2)\]</span></p>
<p>Similarly, if we consider a 2-dimensional convolutional layer, with inputs <span class="math">\(\{x_{n,m}\}\)</span> and outputs <span class="math">\(\{y_{n,m}\}\)</span>:</p>
<div class="centerimgcontainer">
<img src="img/Conv2-5x5-Conv2-XY.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>We can, again, write down the outputs in terms of the inputs:</p>
<p><span class="math">\[y_{n,m} = A\left(\begin{array}{ccc} x_{n,~m}, &amp; x_{n+1,~m},&amp; ...,~\\ x_{n,~m+1}, &amp; x_{n+1,~m+1}, &amp; ..., ~\\ &amp;...\\\end{array}\right)\]</span></p>
<p>For example:</p>
<p><span class="math">\[y_{0,0} = A\left(\begin{array}{cc} x_{0,~0}, &amp; x_{1,~0},~\\ x_{0,~1}, &amp; x_{1,~1}~\\\end{array}\right)\]</span> <span class="math">\[y_{1,0} = A\left(\begin{array}{cc} x_{1,~0}, &amp; x_{2,~0},~\\ x_{1,~1}, &amp; x_{2,~1}~\\\end{array}\right)\]</span></p>
<p>If one combines this with the equation for <span class="math">\(A(x)\)</span>,</p>
<p><span class="math">\[A(x) = \sigma(Wx + b)\]</span></p>
<p>one has everything they need to implement a convolutional neural network, at least in theory.</p>
<p>In practice, this is often not best way to think about convolutional neural networks. There is an alternative formulation, in terms of a mathematical operation called <em>convolution</em>, that is often more helpful.</p>
<p>The convolution operation is a powerful tool. In mathematics, it comes up in diverse contexts, ranging from the study of partial differential equations to probability theory. In part because of its role in PDEs, convolution is very important in the physical sciences. It also has an important role in many applied areas, like computer graphics and signal processing.</p>
<p>For us, convolution will provide a number of benefits. Firstly, it will allow us to create much more efficient implementations of convolutional layers than the naive perspective might suggest. Secondly, it will remove a lot of messiness from our formulation, handling all the bookkeeping presently showing up in the indexing of <span class="math">\(x\)</span>s – the present formulation may not seem messy yet, but that’s only because we haven’t got into the tricky cases yet. Finally, convolution will give us a significantly different perspective for reasoning about convolutional layers.</p>
<blockquote>
<p>I admire the elegance of your method of computation; it must be nice to ride through these fields upon the horse of true mathematics while the like of us have to make our way laboriously on foot.  — Albert Einstein</p>
</blockquote>
<h1 id="next-posts-in-this-series">Next Posts in this Series</h1>
<p>This post is part of a series on convolutional neural networks and their generalizations. The first two posts will be review for those familiar with deep learning, while later ones should be of interest to everyone. To get updates, subscribe to my <a href="../../rss.xml">RSS feed</a>! I’m aiming for daily posts this week!</p>
<p>Please comment below or on the side. Pull requests can be made on <a href="https://github.com/colah/Conv-Nets-Series">github</a>.</p>
<h1 id="acknowledgments">Acknowledgments</h1>
<p>I’m grateful to Eliana Lorch, Aaron Courville, and Sebastian Zany for their comments and support.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>It should be noted that not all neural networks that use multiple copies of the same neuron are convolutional neural networks. Convolutional neural networks are just one type of neural network that uses the more general trick, <em>weight-tying</em>. Other kinds of neural network that do this are recurrent neural networks and recursive neural networks.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Groups of neurons, like <span class="math">\(A\)</span>, that appear in multiple places are sometimes called <em>modules</em>, and networks that use them are sometimes called <em>modular neural networks</em>.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>They also test using 7 in the paper.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>This seems to have interesting analogies to rods and cones in the retina.<a href="#fnref4">↩</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Tue, 08 Jul 2014 00:00:00 UT</pubDate>
    <guid>http://colah.github.io/posts/2014-07-Conv-Nets-Modular/</guid>
</item>
<item>
    <title>Deep Learning, NLP, and Representations</title>
    <link>http://colah.github.io/posts/2014-07-NLP-RNNs-Representations/</link>
    <description><![CDATA[<h1 id="introduction">Introduction</h1>
<p>In the last few years, deep neural networks have dominated pattern recognition. They blew the previous state of the art out of the water for many computer vision tasks. Voice recognition is also moving that way.</p>
<p>But despite the results, we have to wonder… why do they work so well?</p>
<p>This post reviews some extremely remarkable results in applying deep neural networks to natural language processing (NLP). In doing so, I hope to make accessible one promising answer as to why deep neural networks work. I think it’s a very elegant perspective.</p>
<h1 id="one-hidden-layer-neural-networks">One Hidden Layer Neural Networks</h1>
<p>A neural network with a hidden layer has universality: given enough hidden units, it can approximate any function. This is a frequently quoted – and even more frequently, misunderstood and applied – theorem.</p>
<p>It’s true, essentially, because the hidden layer can be used as a lookup table.</p>
<p>For simplicity, let’s consider a perceptron network. A <a href="http://en.wikipedia.org/wiki/Perceptron">perceptron</a> is a very simple neuron that fires if it exceeds a certain threshold and doesn’t fire if it doesn’t reach that threshold. A perceptron network gets binary (0 and 1) inputs and gives binary outputs.</p>
<p>Note that there are only a finite number of possible inputs. For each possible input, we can construct a neuron in the hidden layer that fires for that input,<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> and only on that specific input. Then we can use the connections between that neuron and the output neurons to control the output in that specific case. <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a></p>
<div class="centerimgcontainer">
<img src="img/flowchart-PerceptronLookup.png" alt="" style="">
</div>
<p>And so, it’s true that one hidden layer neural networks are universal. But there isn’t anything particularly impressive or exciting about that. Saying that your model can do the same thing as a lookup table isn’t a very strong argument for it. It just means it isn’t <em>impossible</em> for your model to do the task.</p>
<p>Universality means that a network can fit to any training data you give it. It doesn’t mean that it will interpolate to new data points in a reasonable way.</p>
<p>No, universality isn’t an explanation for why neural networks work so well. The real reason seems to be something much more subtle… And, to understand it, we’ll first need to understand some concrete results.</p>
<h1 id="word-embeddings">Word Embeddings</h1>
<p>I’d like to start by tracing a particularly interesting strand of deep learning research: word embeddings. In my personal opinion, word embeddings are one of the most exciting area of research in deep learning at the moment. Beyond that, I think they are one of the best places to gain intuition about why deep learning is so effective.</p>
<p>A word embedding <span class="math">\(W: \mathrm{words} \to \mathbb{R}^n\)</span> is a paramaterized function mapping words in some language to high-dimensional vectors (perhaps 200 to 500 dimensions). For example, we might find:</p>
<p><span class="math">\[W(``\text{cat}\!&quot;) = (0.2,~ \text{-}0.4,~ 0.7,~ ...)\]</span></p>
<p><span class="math">\[W(``\text{mat}\!&quot;) = (0.0,~ 0.6,~ \text{-}0.1,~ ...)\]</span></p>
<p>(Typically, the function is a lookup table, parameterized by a matrix, <span class="math">\(\theta\)</span>, with a row for each word: <span class="math">\(W_\theta(w_n) = \theta_n\)</span>.)</p>
<p><span class="math">\(W\)</span> is initialized to have random vectors for each word. It learns to have meaningful vectors in order to perform some task.</p>
<p>For example, one task we might train a network for is predicting whether a 5-gram (sequence of five words) is ‘valid.’ We can easily get lots of 5-grams from Wikipedia (eg. “cat sat on the mat”) and then ‘break’ half of them by switching a word with a random word (eg. “cat sat <strong>song</strong> the mat”), since that will almost certainly make our 5-gram nonsensical.</p>
<div class="floatrightimgcontainer">
<img src="img/Bottou-WordSetup.png" alt="" style="">
<div class="caption">
Modular Network to determine if a 5-gram is ‘valid’ (From <a href="http://arxiv.org/pdf/1102.1808v3.pdf">Bottou (2011)</a>)
</div>
</div>
<div class="spaceafterimg">

</div>
<p>The model we train will run each word in the 5-gram through <span class="math">\(W\)</span> to get a vector representing it and feed those into another ‘module’ called <span class="math">\(R\)</span> which tries to predict if the 5-gram is ‘valid’ or ‘broken.’ Then, we’d like:</p>
<p><span class="math">\[R(W(``\text{cat}\!&quot;),~ W(``\text{sat}\!&quot;),~ W(``\text{on}\!&quot;),~ W(``\text{the}\!&quot;),~ W(``\text{mat}\!&quot;)) = 1\]</span></p>
<p><span class="math">\[R(W(``\text{cat}\!&quot;),~ W(``\text{sat}\!&quot;),~ W(``\text{song}\!&quot;),~ W(``\text{the}\!&quot;),~ W(``\text{mat}\!&quot;)) = 0\]</span></p>
<p>In order to predict these values accurately, the network needs to learn good parameters for both <span class="math">\(W\)</span> and <span class="math">\(R\)</span>.</p>
<p>Now, this task isn’t terribly interesting. Maybe it could be helpful in detecting grammatical errors in text or something. But what is extremely interesting is <span class="math">\(W\)</span>.</p>
<p>(In fact, to us, the entire point of the task is to learn <span class="math">\(W\)</span>. We could have done several other tasks – another common one is predicting the next word in the sentence. But we don’t really care. In the remainder of this section we will talk about many word embedding results and won’t distinguish between different approaches.)</p>
<p>One thing we can do to get a feel for the word embedding space is to visualize them with <a href="http://homepage.tudelft.nl/19j49/t-SNE.html">t-SNE</a>, a sophisticated technique for visualizing high-dimensional data.</p>
<div class="bigcenterimgcontainer">
<img src="img/Turian-WordTSNE.png" alt="" style="">
<div class="caption">
t-SNE visualizations of word embeddings. Left: Number Region; Right: Jobs Region. From <a href="http://www.iro.umontreal.ca/~lisa/pointeurs/turian-wordrepresentations-acl10.pdf">Turian <em>et al.</em> (2010)</a>, see <a href="http://metaoptimize.s3.amazonaws.com/cw-embeddings-ACL2010/embeddings-mostcommon.EMBEDDING_SIZE=50.png">complete image</a>.
</div>
</div>
<div class="spaceafterimg">

</div>
<p>This kind of ‘map’ of words makes a lot of intuitive sense to us. Similar words are close together. Another way to get at this is to look at which words are closest in the embedding to a given word. Again, the words tend to be quite similar.</p>
<div class="bigcenterimgcontainer">
<img src="img/Colbert-WordTable2.png" alt="" style="">
<div class="caption">
What words have embeddings closest to a given word? From <a href="http://arxiv.org/pdf/1103.0398v1.pdf">Colbert <em>et al.</em> (2011)</a>
</div>
</div>
<div class="spaceafterimg">

</div>
<p>It seems natural for a network to make words with similar meanings have similar vectors. If you switch a word for a synonym (eg. “a few people sing well” <span class="math">\(\to\)</span> “a <em>couple</em> people sing well”), the validity of the sentence doesn’t change. While, from a naive perspective, the input sentence has changed a lot, if <span class="math">\(W\)</span> maps synonyms (like “few” and “couple”) close together, from <span class="math">\(R\)</span>’s perspective little changes.</p>
<p>This is very powerful. The number of possible 5-grams is massive and we have a comparatively small number of data points to try to learn from. Similar words being close together allows us to generalize from one sentence to a class of similar sentences. This doesn’t just mean switching a word for a synonym, but also switching a word for a word in a similar class (eg. “the wall is blue” <span class="math">\(\to\)</span> “the wall is <em>red</em>”). Further, we can change multiple words (eg. “the wall is blue” <span class="math">\(\to\)</span> “the <em>ceiling</em> is <em>red</em>”). The impact of this is exponential with respect to the number of words.<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a></p>
<p>So, clearly this is a very useful thing for <span class="math">\(W\)</span> to do. But how does it learn to do this? It seems quite likely that there are lots of situations where it has seen a sentence like “the wall is blue” and know that it is valid before it sees a sentence like “the wall is red”. As such, shifting “red” a bit closer to “blue” makes the network perform better.</p>
<p>We still need to see examples of every word being used, but the analogies allow us to generalize to new combinations of words. You’ve seen all the words that you understand before, but you haven’t seen all the sentences that you understand before. So too with neural networks.</p>
<div class="floatrightimgcontainer">
<img src="img/Mikolov-GenderVecs.png" alt="" style="">
<div class="caption">
From <a href="https://www.aclweb.org/anthology/N/N13/N13-1090.pdf">Mikolov <em>et al.</em> (2013a)</a>
</div>
</div>
<p>Word embeddings exhibit an even more remarkable property: analogies between words seem to be encoded in the difference vectors between words. For example, there seems to be a constant male-female difference vector:</p>
<p><span class="math">\[W(``\text{woman}\!&quot;) - W(``\text{man}\!&quot;) ~\simeq~ W(``\text{aunt}\!&quot;) - W(``\text{uncle}\!&quot;)\]</span> <span class="math">\[W(``\text{woman}\!&quot;) - W(``\text{man}\!&quot;) ~\simeq~ W(``\text{queen}\!&quot;) - W(``\text{king}\!&quot;)\]</span></p>
<p>This may not seem too surprising. After all, gender pronouns mean that switching a word can make a sentence grammatically incorrect. You write, “<em>she</em> is the aunt” but “<em>he</em> is the uncle.” Similarly, “<em>he</em> is the King” but “<em>she</em> is the Queen.” If one sees “<em>she</em> is the <em>uncle</em>,” the most likely explanation is a grammatical error. If words are being randomly switched half the time, it seems pretty likely that happened here.</p>
<p>“Of course!” We say with hindsight, “the word embedding will learn to encode gender in a consistent way. In fact, there’s probably a gender dimension. Same thing for singular vs plural. It’s easy to find these trivial relationships!”</p>
<p>It turns out, though, that much more sophisticated relationships are also encoded in this way. It seems almost miraculous!</p>
<div class="bigcenterimgcontainer">
<img src="img/Mikolov-AnalogyTable.png" alt="" style="">
<div class="caption">
Relationship pairs in a word embedding. From <a href="http://arxiv.org/pdf/1301.3781.pdf">Mikolov <em>et al.</em> (2013b)</a>.
</div>
</div>
<div class="spaceafterimg">

</div>
<p>It’s important to appreciate that all of these properties of <span class="math">\(W\)</span> are <em>side effects</em>. We didn’t try to have similar words be close together. We didn’t try to have analogies encoded with difference vectors. All we tried to do was perform a simple task, like predicting whether a sentence was valid. These properties more or less popped out of the optimization process.</p>
<p>This seems to be a great strength of neural networks: they learn better ways to represent data, automatically. Representing data well, in turn, seems to be essential to success at many machine learning problems. Word embeddings are just a particularly striking example of learning a representation.</p>
<h1 id="shared-representations">Shared Representations</h1>
<p>The properties of word embeddings are certainly interesting, but can we do anything useful with them? Besides predicting silly things, like whether a 5-gram is ‘valid’?</p>
<div class="floatrightimgcontainer">
<img src="img/flowchart-TranfserLearning2.png" alt="" style="">
<div class="caption">
<span class="math">\(W\)</span> and <span class="math">\(F\)</span> learn to perform task A. Later, <span class="math">\(G\)</span> can learn to perform B based on <span class="math">\(W\)</span>.
</div>
</div>
<p>We learned the word embedding in order to do well on a simple task, but based on the nice properties we’ve observed in word embeddings, you may suspect that they could be generally useful in NLP tasks. In fact, word representations like these are extremely important:</p>
<blockquote>
<p>The use of word representations… has become a key “secret sauce” for the success of many NLP systems in recent years, across tasks including named entity recognition, part-of-speech tagging, parsing, and semantic role labeling. (<a href="http://nlp.stanford.edu/~lmthang/data/papers/conll13_morpho.pdf">Luong <em>et al.</em> (2013)</a>)</p>
</blockquote>
<p>This general tactic – learning a good representation on a task A and then using it on a task B – is one of the major tricks in the Deep Learning toolbox. It goes by different names depending on the details: pretraining, transfer learning, and multi-task learning. One of the great strengths of this approach is that it allows the representation to learn from more than one kind of data.</p>
<p>There’s a counterpart to this trick. Instead of learning a way to represent one kind of data and using it to perform multiple kinds of tasks, we can learn a way to map multiple kinds of data into a single representation!</p>
<p>One nice example of this is a bilingual word-embedding, produced in <a href="http://ai.stanford.edu/~wzou/emnlp2013_ZouSocherCerManning.pdf">Socher <em>et al.</em> (2013a)</a>. We can learn to embed words from two different languages in a single, shared space. In this case, we learn to embed English and Mandarin Chinese words in the same space.</p>
<div class="floatrightimgcontainer">
<img src="img/flowchart-billingual.png" alt="" style="">
</div>
<p>We train two word embeddings, <span class="math">\(W_{en}\)</span> and <span class="math">\(W_{zh}\)</span> in a manner similar to how we did above. However, we know that certain English words and Chinese words have similar meanings. So, we optimize for an additional property: words that we know are close translations should be close together.</p>
<p>Of course, we observe that the words we knew had similar meanings end up close together. Since we optimized for that, it’s not surprising. More interesting is that words we <em>didn’t know</em> were translations end up close together.</p>
<p>In light of our previous experiences with word embeddings, this may not seem too surprising. Word embeddings pull similar words together, so if an English and Chinese word we know to mean similar things are near each other, their synonyms will also end up near each other. We also know that things like gender differences tend to end up being represented with a constant difference vector. It seems like forcing enough points to line up should force these difference vectors to be the same in both the English and Chinese embeddings. A result of this would be that if we know that two male versions of words translate to each other, we should also get the female words to translate to each other.</p>
<p>Intuitively, it feels a bit like the two languages have a similar ‘shape’ and that by forcing them to line up at different points, they overlap and other points get pulled into the right positions.</p>
<div class="centerimgcontainer">
<img src="img/Socher-BillingualTSNE.png" alt="" style="">
<div class="caption">
t-SNE visualization of the bilingual word embedding. Green is Chinese, Yellow is English. (<a href="http://ai.stanford.edu/~wzou/emnlp2013_ZouSocherCerManning.pdf">Socher <em>et al.</em> (2013a)</a>)
</div>
</div>
<p>In billingual word embeddings, we learn a shared representation for two very similar kinds of data. But we can also learn to embed very different kinds of data in the same space.</p>
<div class="floatrightimgcontainer">
<img src="img/flowchart-DeViSE.png" alt="" style="">
</div>
<p>Recently, deep learning has begun exploring models that embed images and words in a single representation.<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a></p>
<p>The basic idea is that one classifies images by outputting a vector in a word embedding. Images of dogs are mapped near the “dog” word vector. Images of horses are mapped near the “horse” vector. Images of automobiles near the “automobile” vector. And so on.</p>
<p>The interesting part is what happens when you test the model on new classes of images. For example, if the model wasn’t trained to classify cats – that is, to map them near the “cat” vector – what happens when we try to classify images of cats?</p>
<div class="centerimgcontainer">
<img src="img/Socher-ImageClassManifold.png" alt="" style="">
<div class="caption">
(<a href="http://nlp.stanford.edu/~socherr/SocherGanjooManningNg_NIPS2013.pdf">Socher <em>et al.</em> (2013b)</a>)
</div>
</div>
<p>It turns out that the network is able to handle these new classes of images quite reasonably. Images of cats aren’t mapped to random points in the word embedding space. Instead, they tend to be mapped to the general vicinity of the “dog” vector, and, in fact, close to the “cat” vector. Similarly, the truck images end up relatively close to the “truck” vector, which is near the related “automobile” vector.</p>
<div class="bigcenterimgcontainer">
<img src="img/Socher-ImageClass-tSNE.png" alt="" style="">
<div class="caption">
(<a href="http://nlp.stanford.edu/~socherr/SocherGanjooManningNg_NIPS2013.pdf">Socher <em>et al.</em> (2013b)</a>)
</div>
</div>
<p>This was done by members of the Stanford group with only 8 known classes (and 2 unknown classes). The results are already quite impressive. But with so few known classes, there are very few points to interpolate the relationship between images and semantic space off of.</p>
<!-- (from KSH)?? -->

<p>The Google group did a much larger version – instead of 8 categories, they used 1,000 – around the same time (<a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/41473.pdf">Frome <em>et al.</em> (2013)</a>) and has followed up with a new variation (<a href="http://arxiv.org/pdf/1312.5650.pdf">Norouzi <em>et al.</em> (2014)</a>). Both are based on an very powerful image classification model (from <a href="http://www.cs.toronto.edu/~fritz/absps/imagenet.pdf">Krizehvsky <em>et al.</em> (2012)</a>), but embed images into the word embedding space in different ways.</p>
<p>The results are impressive. While they may not get images of unknown classes to the precise vector representing that class, they are able to get to the right neighborhood. So, if you ask it to classify images of unknown classes and the classes are fairly different, it can distinguish between the different classes.</p>
<p>Even though I’ve never seen a Aesculapian snake or an Armadillo before, if you show me a picture of one and a picture of the other, I can tell you which is which because I have a general idea of what sort of animal is associated with each word. These networks can accomplish the same thing.</p>
<p><em>(These results all exploit a sort of “these words are similar” reasoning. But it seems like much stronger results should be possible based on relationships between words. In our word embedding space, there is a consistent difference vector between male and female version of words. Similarly, in image space, there are consistent features distinguishing between male and female. Beards, mustaches, and baldness are all strong, highly visible indicators of being male. Breasts and, less reliably, long hair, makeup and jewelery, are obvious indicators of being female.<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a> Even if you’ve never seen a king before, if the queen, determined to be such by the presence of a crown, suddenly has a beard, it’s pretty reasonable to give the male version.)</em></p>
<p>Shared embeddings are an extremely exciting area of research and drive at why the representation focused perspective of deep learning is so compelling.</p>
<h1 id="recursive-neural-networks">Recursive Neural Networks</h1>
<p>We began our discussion of word embeddings with the following network:</p>
<div class="centerimgcontainer">
<img src="img/Bottou-WordSetup.png" alt="" style="">
<div class="caption">
Modular Network that learns word embeddings (From <a href="http://arxiv.org/pdf/1102.1808v3.pdf">Bottou (2011)</a>)
</div>
</div>
<div class="spaceafterimg">

</div>
<p>The above diagram represents a <em>modular</em> network, <span class="math">\(R(W(w_1),~ W(w_2),~ W(w_3),~ W(w_4),~ W(w_5))\)</span>. It is built from two modules, <span class="math">\(W\)</span> and <span class="math">\(R\)</span>. This approach, of building neural networks from smaller neural network “modules” that can be composed together, is not very wide spread. It has, however, been very successful in NLP.</p>
<p>Models like the above are powerful, but they have an unfortunate limitation: they can only have a fixed number of inputs.</p>
<p>We can overcome this by adding an association module, <span class="math">\(A\)</span>, which will take two word or phrase representations and merge them.</p>
<div class="centerimgcontainer">
<img src="img/Bottou-Afold.png" alt="" style="">
<div class="caption">
(From <a href="http://arxiv.org/pdf/1102.1808v3.pdf">Bottou (2011)</a>)
</div>
</div>
<div class="spaceafterimg">

</div>
<p>By merging sequences of words, <span class="math">\(A\)</span> takes us from representing words to representing phrases or even representing whole <em>sentences</em>! And because we can merge together different numbers of words, we don’t have to have a fixed number of inputs.</p>
<p>It doesn’t necessarily make sense to merge together words in a sentence linearly. If one considers the phrase “the cat sat on the mat”, it can naturally be bracketed into segments: “((the cat) (sat (on (the mat))”. We can apply <span class="math">\(A\)</span> based on this bracketing:</p>
<div class="bigcenterimgcontainer">
<img src="img/Bottou-Atree.png" alt="" style="">
<div class="caption">
(From <a href="http://arxiv.org/pdf/1102.1808v3.pdf">Bottou (2011)</a>)
</div>
</div>
<div class="spaceafterimg">

</div>
<p>These models are often called “recursive neural networks” because one often has the output of a module go into a module of the same type. They are also sometimes called “tree-structured neural networks.”</p>
<p>Recursive neural networks have had significant successes in a number of NLP tasks. For example, <a href="http://nlp.stanford.edu/~socherr/EMNLP2013_RNTN.pdf">Socher <em>et al.</em> (2013c)</a> uses a recursive neural network to predict sentence sentiment:</p>
<div class="bigcenterimgcontainer">
<img src="img/Socher-SentimentTree.png" alt="" style="">
<div class="caption">
(From <a href="http://nlp.stanford.edu/~socherr/EMNLP2013_RNTN.pdf">Socher <em>et al.</em> (2013c)</a>)
</div>
</div>
<div class="spaceafterimg">

</div>
<p>One major goal has been to create a <em>reversible</em> sentence representation, a representation that one can reconstruct an actual sentence from, with roughly the same meaning. For example, we can try to introduce a disassociation module, <span class="math">\(D\)</span>, that tries to undo <span class="math">\(A\)</span>:</p>
<div class="bigcenterimgcontainer">
<img src="img/Bottou-unfold.png" alt="" style="">
<div class="caption">
(From <a href="http://arxiv.org/pdf/1102.1808v3.pdf">Bottou (2011)</a>)
</div>
</div>
<div class="spaceafterimg">

</div>
<p>If we could accomplish such a thing, it would be an extremely powerful tool. For example, we could try to make a bilingual sentence representation and use it for translation.</p>
<p>Unfortunately, this turns out to be very difficult. Very very difficult. And given the tremendous promise, there are lots of people working on it.</p>
<p>Recently, <a href="http://arxiv.org/pdf/1406.1078v1.pdf">Cho <em>et al.</em> (2014)</a> have made some progress on representing phrases, with a model that can encode English phrases and decode them in French. Look at the phrase representations it learns!</p>
<div class="bigcenterimgcontainer">
<img src="img/Cho-TimePhrase-TSNE.png" alt="" style="">
<div class="caption">
Small section of the t-SNE of the phrase representation <br /> (From <a href="http://arxiv.org/pdf/1406.1078v1.pdf">Cho <em>et al.</em> (2014)</a>)
</div>
</div>
<div class="spaceafterimg">

</div>
<h1 id="criticisms">Criticisms</h1>
<p>I’ve heard some of the results reviewed above criticized by researchers in other fields, in particualar, in NLP and linguistics. The concerns are not with the results themselves, but the conclusions drawn from them, and how they compare to other techniques.</p>
<p>I don’t feel qualified to articulate these concerns. I’d encourage someone who feels this way to describe the concerns in the comments.</p>
<h1 id="conclusion">Conclusion</h1>
<p>The representation perspective of deep learning is a powerful view that seems to answer why deep neural networks are so effective. Beyond that, I think there’s something extremely beautiful about it: why are neural networks effective? Because better ways of representing data can pop out of optimizing layered models.</p>
<p>Deep learning is a very young field, where theories aren’t strongly established and views quickly change. That said, it is my impression that the representation-focused perspective of neural networks is presently very popular.</p>
<p>This post reviews a lot of research results I find very exciting, but my main motivation is to set the stage for a future post exploring connections between deep learning, type theory and functional programming. If you’re interested, you can subscribe to my <a href="../../rss.xml">rss feed</a> so that you’ll see it when it is published.</p>
<p><em>(I would be delighted to hear your comments and thoughts: you can comment inline or at the end. For typos, technical errors, or clarifications you would like to see added, you are encouraged to make a pull request on <a href="https://github.com/colah/NLP-RNNs-Representations-Post">github</a>)</em></p>
<h1 id="acknowledgments">Acknowledgments</h1>
<p>I’m grateful to Eliana Lorch, Yoshua Bengio, Michael Nielsen, Laura Ball, Rob Gilson, and Jacob Steinhardt for their comments and support.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Constructing a case for every possible input requires <span class="math">\(2^n\)</span> hidden neurons, when you have <span class="math">\(n\)</span> input neurons. In reality, the situation isn’t usually that bad. You can have cases that encompass multiple inputs. And you have can have overlapping cases that add together to achieve the right input on their intersection.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>(It isn’t only perceptron networks that have universality. Networks of sigmoid neurons (and other activation functions) are also universal: give enough hidden neurons, they can approximate any continuous function arbitrarily well. Seeing this is significantly trickier because you can’t just isolate inputs.)<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>The seminal paper, <a href="http://machinelearning.wustl.edu/mlpapers/paper_files/BengioDVJ03.pdf"><em>A Neural Probabilistic Language Model</em> (Bengio, <em>et al.</em> 2003)</a> has a great deal of insight about why word embeddings are powerful.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>Previous work has been done modeling the joint distributions of tags and images, but it took a very different perspective.<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p>I’m very conscious that physical indicators of gender can be misleading. I don’t mean to imply, for example, that everyone who is bald is male or everyone who has breasts is female. Just that these often indicate such, and greatly adjust our prior.<a href="#fnref5">↩</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Mon, 07 Jul 2014 00:00:00 UT</pubDate>
    <guid>http://colah.github.io/posts/2014-07-NLP-RNNs-Representations/</guid>
</item>
<item>
    <title>Neural Networks, Manifolds, and Topology</title>
    <link>http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/</link>
    <description><![CDATA[<p>Recently, there’s been a great deal of excitement and interest in deep neural networks because they’ve achieved breakthrough results in areas such as computer vision.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<p>However, there remain a number of concerns about them. One is that it can be quite challenging to understand <em>what</em> a neural network is really doing. If one trains it well, it achieves high quality results, but it is challenging to understand how it is doing so. If the network fails, it is hard to understand what went wrong.</p>
<p>While it is challenging to understand the behavior of deep neural networks in general, it turns out to be much easier to explore low-dimensional deep neural networks – networks that only have a few neurons in each layer. In fact, we can create visualizations to completely understand the behavior and training of such networks. This perspective will allow us to gain deeper intuition about the behavior of neural networks and observe a connection linking neural networks to an area of mathematics called topology.</p>
<p>A number of interesting things follow from this, including fundamental lower-bounds on the complexity of a neural network capable of classifying certain datasets.</p>
<h2 id="a-simple-example">A Simple Example</h2>
<p>Let’s begin with a very simple dataset, two curves on a plane. The network will learn to classify points as belonging to one or the other.</p>
<div class="centerimgcontainer">
<img src="img/simple2_data.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>The obvious way to visualize the behavior of a neural network – or any classification algorithm, for that matter – is to simply look at how it classifies every possible data point.</p>
<p>We’ll start with the simplest possible class of neural network, one with only an input layer and an output layer. Such a network simply tries to separate the two classes of data by dividing them with a line.</p>
<div class="centerimgcontainer">
<img src="img/simple2_linear.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>That sort of network isn’t very interesting. Modern neural networks generally have multiple layers between their input and output, called “hidden” layers. At the very least, they have one.</p>
<div class="centerimgcontainer">
<img src="img/example_network.svg" alt="" style="">
<div class="caption">
Diagram of a simple network from Wikipedia
</div>
</div>
<div class="spaceafterimg">

</div>
<p>As before, we can visualize the behavior of this network by looking at what it does to different points in its domain. It separates the data with a more complicated curve than a line.</p>
<div class="centerimgcontainer">
<img src="img/simple2_0.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>With each layer, the network transforms the data, creating a new <em>representation</em>.<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> We can look at the data in each of these representations and how the network classifies them. When we get to the final representation, the network will just draw a line through the data (or, in higher dimensions, a hyperplane).</p>
<p>In the previous visualization, we looked at the data in its “raw” representation. You can think of that as us looking at the input layer. Now we will look at it after it is transformed by the first layer. You can think of this as us looking at the hidden layer.</p>
<p>Each dimension corresponds to the firing of a neuron in the layer.</p>
<div class="centerimgcontainer">
<img src="img/simple2_1.png" alt="" style="">
<div class="caption">
The hidden layer learns a representation so that the data is linearly seperable
</div>
</div>
<div class="spaceafterimg">

</div>
<h2 id="continuous-visualization-of-layers">Continuous Visualization of Layers</h2>
<p>In the approach outlined in the previous section, we learn to understand networks by looking at the representation corresponding to each layer. This gives us a discrete list of representations.</p>
<p>The tricky part is in understanding how we go from one to another. Thankfully, neural network layers have nice properties that make this very easy.</p>
<p>There are a variety of different kinds of layers used in neural networks. We will talk about tanh layers for a concrete example. A tanh layer <span class="math">\(\tanh(Wx+b)\)</span> consists of:</p>
<ol type="1">
<li>A linear transformation by the “weight” matrix <span class="math">\(W\)</span></li>
<li>A translation by the vector <span class="math">\(b\)</span></li>
<li>Point-wise application of tanh.</li>
</ol>
<p>We can visualize this as a continuous transformation, as follows:</p>
<div class="centerimgcontainer">
<img src="img/1layer.gif" alt="Gradually applying a neural network layer" style="">
</div>
<div class="spaceafterimg">

</div>
<p>The story is much the same for other standard layers, consisting of an affine transformation followed by pointwise application of a monotone activation function.</p>
<p>We can apply this technique to understand more complicated networks. For example, the following network classifies two spirals that are slightly entangled, using four hidden layers. Over time, we can see it shift from the “raw” representation to higher level ones it has learned in order to classify the data. While the spirals are originally entangled, by the end they are linearly separable.</p>
<div class="centerimgcontainer">
<img src="img/spiral.1-2.2-2-2-2-2-2.gif" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>On the other hand, the following network, also using multiple layers, fails to classify two spirals that are more entangled.</p>
<div class="centerimgcontainer">
<img src="img/spiral.2.2-2-2-2-2-2-2.gif" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>It is worth explicitly noting here that these tasks are only somewhat challenging because we are using low-dimensional neural networks. If we were using wider networks, all this would be quite easy.</p>
<p><em>(Andrej Karpathy has made a <a href="http://cs.stanford.edu/people/karpathy/convnetjs//demo/classify2d.html">nice demo</a> based on ConvnetJS that allows you to interactively explore networks with this sort of visualization of training!)</em></p>
<h2 id="topology-of-tanh-layers">Topology of tanh Layers</h2>
<p>Each layer stretches and squishes space, but it never cuts, breaks, or folds it. Intuitively, we can see that it preserves topological properties. For example, a set will be connected afterwards if it was before (and vice versa).</p>
<p>Transformations like this, which don’t affect topology, are called homeomorphisms. Formally, they are bijections that are continuous functions both ways.</p>
<p><strong>Theorem</strong>: Layers with <span class="math">\(N\)</span> inputs and <span class="math">\(N\)</span> outputs are homeomorphisms, if the weight matrix, <span class="math">\(W\)</span>, is non-singular. (Though one needs to be careful about domain and range.)</p>
<p><strong>Proof</strong>: Let’s consider this step by step:</p>
<ol type="1">
<li>Let’s assume <span class="math">\(W\)</span> has a non-zero determinant. Then it is a bijective linear function with a linear inverse. Linear functions are continuous. So, multiplying by <span class="math">\(W\)</span> is a homeomorphism.</li>
<li>Translations are homeomorphisms</li>
<li>tanh (and sigmoid and softplus but not ReLU) are continuous functions with continuous inverses. They are bijections if we are careful about the domain and range we consider. Applying them pointwise is a homemorphism</li>
</ol>
<p>Thus, if <span class="math">\(W\)</span> has a non-zero determinant, our layer is a homeomorphism. ∎</p>
<p>This result continues to hold if we compose arbitrarily many of these layers together.</p>
<h2 id="topology-and-classification">Topology and Classification</h2>
<div class="floatrightimgcontainer">
<img src="img/topology_base.png" alt="" style="">
<div class="caption">
<span class="math">\(A\)</span> is red, <span class="math">\(B\)</span> is blue
</div>
</div>
<div class="spaceafterimg">

</div>
<p>Consider a two dimensional dataset with two classes <span class="math">\(A, B \subset \mathbb{R}^2\)</span>:</p>
<p><span class="math">\[A = \{x | d(x,0) &lt; 1/3\}\]</span></p>
<p><span class="math">\[B = \{x | 2/3 &lt; d(x,0) &lt; 1\}\]</span></p>
<p><strong>Claim</strong>: It is impossible for a neural network to classify this dataset without having a layer that has 3 or more hidden units, regardless of depth.</p>
<p>As mentioned previously, classification with a sigmoid unit or a softmax layer is equivalent to trying to find a hyperplane (or in this case a line) that separates <span class="math">\(A\)</span> and <span class="math">\(B\)</span> in the final represenation. With only two hidden units, a network is topologically incapable of separating the data in this way, and doomed to failure on this dataset.</p>
<p>In the following visualization, we observe a hidden representation while a network trains, along with the classification line. As we watch, it struggles and flounders trying to learn a way to do this.</p>
<div class="centerimgcontainer">
<img src="img/topology_2D-2D_train.gif" alt="" style="">
<div class="caption">
For this network, hard work isn’t enough.
</div>
</div>
<div class="spaceafterimg">

</div>
<p>In the end it gets pulled into a rather unproductive local minimum. Although, it’s actually able to achieve <span class="math">\(\sim 80\%\)</span> classification accuracy.</p>
<p>This example only had one hidden layer, but it would fail regardless.</p>
<p><strong>Proof</strong>: Either each layer is a homeomorphism, or the layer’s weight matrix has determinant 0. If it is a homemorphism, <span class="math">\(A\)</span> is still surrounded by <span class="math">\(B\)</span>, and a line can’t separate them. But suppose it has a determinant of 0: then the dataset gets collapsed on some axis. Since we’re dealing with something homeomorphic to the original dataset, <span class="math">\(A\)</span> is surrounded by <span class="math">\(B\)</span>, and collapsing on any axis means we will have some points of <span class="math">\(A\)</span> and <span class="math">\(B\)</span> mix and become impossible to distinguish between. ∎</p>
<p>If we add a third hidden unit, the problem becomes trivial. The neural network learns the following representation:</p>
<div class="centerimgcontainer">
<img src="img/topology_3d.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>With this representation, we can separate the datasets with a hyperplane.</p>
<p>To get a better sense of what’s going on, let’s consider an even simpler dataset that’s 1-dimensional:</p>
<div class="floatrightimgcontainer">
<img src="img/topology_1d.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p><span class="math">\[A = [-\frac{1}{3}, \frac{1}{3}]\]</span></p>
<p><span class="math">\[B = [-1, -\frac{2}{3}] \cup [\frac{2}{3}, 1]\]</span></p>
<p>Without using a layer of two or more hidden units, we can’t classify this dataset. But if we use one with two units, we learn to represent the data as a nice curve that allows us to separate the classes with a line:</p>
<div class="centerimgcontainer">
<img src="img/topology_1D-2D_train.gif" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>What’s happening? One hidden unit learns to fire when <span class="math">\(x &gt; -\frac{1}{2}\)</span> and one learns to fire when <span class="math">\(x &gt; \frac{1}{2}\)</span>. When the first one fires, but not the second, we know that we are in A.</p>
<h2 id="the-manifold-hypothesis">The Manifold Hypothesis</h2>
<p>Is this relevant to real world data sets, like image data? If you take the manifold hypothesis really seriously, I think it bares consideration.</p>
<p>The manifold hypothesis is that natural data forms lower-dimensional manifolds in its embedding space. There are both theoretical<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> and experimental<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a> reasons to believe this to be true. If you believe this, then the task of a classification algorithm is fundamentally to separate a bunch of tangled manifolds.</p>
<p>In the previous examples, one class completely surrounded another. However, it doesn’t seem very likely that the dog image manifold is completely surrounded by the cat image manifold. But there are other, more plausible topological situations that could still pose an issue, as we will see in the next section.</p>
<h2 id="links-and-homotopy">Links And Homotopy</h2>
<p>Another interesting dataset to consider is two linked tori, <span class="math">\(A\)</span> and <span class="math">\(B\)</span>.</p>
<div class="centerimgcontainer">
<img src="img/link.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>Much like the previous datasets we considered, this dataset can’t be separated without using <span class="math">\(n+1\)</span> dimensions, namely a <span class="math">\(4\)</span>th dimension.</p>
<p>Links are studied in knot theory, an area of topology. Sometimes when we see a link, it isn’t immediately obvious whether it’s an unlink (a bunch of things that are tangled together, but can be separated by continuous deformation) or not.</p>
<div class="bigcenterimgcontainer">
<img src="img/unlink-2spiral.png" alt="" style="">
<div class="caption">
A relatively simple unlink.
</div>
</div>
<div class="spaceafterimg">

</div>
<p>If a neural network using layers with only 3 units can classify it, then it is an unlink. (Question: Can all unlinks be classified by a network with only 3 units, theoretically?)</p>
<p>From this knot perspective, our continuous visualization of the representations produced by a neural network isn’t just a nice animation, it’s a procedure for untangling links. In topology, we would call it an <em>ambient isotopy</em> between the original link and the separated ones.</p>
<p>Formally, an ambient isotopy between manifolds <span class="math">\(A\)</span> and <span class="math">\(B\)</span> is a continuous function <span class="math">\(F: [0,1] \times X \to Y\)</span> such that each <span class="math">\(F_t\)</span> is a homeomorphism from <span class="math">\(X\)</span> to its range, <span class="math">\(F_0\)</span> is the identity function, and <span class="math">\(F_1\)</span> maps <span class="math">\(A\)</span> to <span class="math">\(B\)</span>. That is, <span class="math">\(F_t\)</span> continuously transitions from mapping <span class="math">\(A\)</span> to itself to mapping <span class="math">\(A\)</span> to <span class="math">\(B\)</span>.</p>
<p><strong>Theorem</strong>: There is an ambient isotopy between the input and a network layer’s representation if: a) <span class="math">\(W\)</span> isn’t singular, b) we are willing to permute the neurons in the hidden layer, and c) there is more than 1 hidden unit.</p>
<p><strong>Proof</strong>: Again, we consider each stage of the network individually:</p>
<ol type="1">
<li>The hardest part is the linear transformation. In order for this to be possible, we need <span class="math">\(W\)</span> to have a positive determinant. Our premise is that it isn’t zero, and we can flip the sign if it is negative by switching two of the hidden neurons, and so we can guarantee the determinant is positive. The space of positive determinant matrices is <a href="http://en.wikipedia.org/wiki/Connected_space#Path_connectedness">path-connected</a>, so there exists <span class="math">\(p: [0,1] \to GL_n(\mathbb{R})\)</span><a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a> such that <span class="math">\(p(0) = Id\)</span> and <span class="math">\(p(1) = W\)</span>. We can continually transition from the identity function to the <span class="math">\(W\)</span> transformation with the function <span class="math">\(x \to p(t)x\)</span>, multiplying <span class="math">\(x\)</span> at each point in time <span class="math">\(t\)</span> by the continuously transitioning matrix <span class="math">\(p(t)\)</span>.</li>
</ol>
<ol start="2" type="1">
<li>We can continually transition from the identity function to the <span class="math">\(b\)</span> translation with the function <span class="math">\(x \to x + tb\)</span>.</li>
<li>We can continually transition from the identity function to the pointwise use of σ with the function: <span class="math">\(x \to (1-t)x + tσ(x)\)</span>. ∎</li>
</ol>
<p>I imagine there is probably interest in programs automatically discovering such ambient isotopies and automatically proving the equivalence of certain links, or that certain links are separable. It would be interesting to know if neural networks can beat whatever the state of the art is there.</p>
<p><em>(Apparently determining if knots are trivial is NP. This doesn’t bode well for neural networks.)</em></p>
<p>The sort of links we’ve talked about so far don’t seem likely to turn up in real world data, but there are higher dimensional generalizations. It seems plausible such things could exist in real world data.</p>
<p>Links and knots are <span class="math">\(1\)</span>-dimensional manifolds, but we need 4 dimensions to be able to untangle all of them. Similarly, one can need yet higher dimensional space to be able to unknot <span class="math">\(n\)</span>-dimensional manifolds. All <span class="math">\(n\)</span>-dimensional manifolds can be untangled in <span class="math">\(2n+2\)</span> dimensions.<a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a></p>
<p><em>(I know very little about knot theory and really need to learn more about what’s known regarding dimensionality and links. If we know a manifold can be embedded in n-dimensional space, instead of the dimensionality of the manifold, what limit do we have?)</em></p>
<h2 id="the-easy-way-out">The Easy Way Out</h2>
<p>The natural thing for a neural net to do, the very easy route, is to try and pull the manifolds apart naively and stretch the parts that are tangled as thin as possible. While this won’t be anywhere close to a genuine solution, it can achieve relatively high classification accuracy and be a tempting local minimum.</p>
<div class="bigcenterimgcontainer">
<img src="img/tangle.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>It would present itself as very high derivatives on the regions it is trying to stretch, and sharp near-discontinuities. We know these things happen.<a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a> Contractive penalties, penalizing the derivatives of the layers at data points, are the natural way to fight this.<a href="#fn8" class="footnoteRef" id="fnref8"><sup>8</sup></a></p>
<p>Since these sort of local minima are absolutely useless from the perspective of trying to solve topological problems, topological problems may provide a nice motivation to explore fighting these issues.</p>
<p>On the other hand, if we only care about achieving good classification results, it seems like we might not care. If a tiny bit of the data manifold is snagged on another manifold, is that a problem for us? It seems like we should be able to get arbitrarily good classification results despite this issue.</p>
<p><em>(My intuition is that trying to cheat the problem like this is a bad idea: it’s hard to imagine that it won’t be a dead end. In particular, in an optimization problem where local minima are a big problem, picking an architecture that can’t genuinely solve the problem seems like a recipe for bad performance.)</em></p>
<h2 id="better-layers-for-manipulating-manifolds">Better Layers for Manipulating Manifolds?</h2>
<p>The more I think about standard neural network layers – that is, with an affine transformation followed by a point-wise activation function – the more disenchanted I feel. It’s hard to imagine that these are really very good for manipulating manifolds.</p>
<p>Perhaps it might make sense to have a very different kind of layer that we can use in composition with more traditional ones?</p>
<p>The thing that feels natural to me is to learn a vector field with the direction we want to shift the manifold:</p>
<div class="centerimgcontainer">
<img src="img/grid_vec.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>And then deform space based on it:</p>
<div class="centerimgcontainer">
<img src="img/grid_bubble.png" alt="" style="">
</div>
<div class="spaceafterimg">

</div>
<p>One could learn the vector field at fixed points (just take some fixed points from the training set to use as anchors) and interpolate in some manner. The vector field above is of the form:</p>
<p><span class="math">\[F(x) = \frac{v_0f_0(x) + v_1f_1(x)}{1+f_0(x)+f_1(x)}\]</span></p>
<p>Where <span class="math">\(v_0\)</span> and <span class="math">\(v_1\)</span> are vectors and <span class="math">\(f_0(x)\)</span> and <span class="math">\(f_1(x)\)</span> are n-dimensional gaussians. This is inspired a bit by <a href="http://en.wikipedia.org/wiki/Radial_basis_function">radial basis functions</a>.</p>
<h2 id="k-nearest-neighbor-layers">K-Nearest Neighbor Layers</h2>
<p>I’ve also begun to think that linear separability may be a huge, and possibly unreasonable, amount to demand of a neural network. In some ways, it feels like the natural thing to do would be to use <a href="knn">k-nearest neighbors</a> (k-NN). However, k-NN’s success is greatly dependent on the representation it classifies data from, so one needs a good representation before k-NN can work well.</p>
<p>As a first experiment, I trained some MNIST networks (two-layer convolutional nets, no dropout) that achieved <span class="math">\(\sim 1\%\)</span> test error. I then dropped the final softmax layer and used the k-NN algorithm. I was able to consistently achieve a reduction in test error of 0.1-0.2%.</p>
<p>Still, this doesn’t quite feel like the right thing. The network is still trying to do linear classification, but since we use k-NN at test time, it’s able to recover a bit from mistakes it made.</p>
<p>k-NN is differentiable with respect to the representation it’s acting on, because of the 1/distance weighting. As such, we can train a network directly for k-NN classification. This can be thought of as a kind of “nearest neighbor” layer that acts as an alternative to softmax.</p>
<p>We don’t want to feedforward our entire training set for each mini-batch because that would be very computationally expensive. I think a nice approach is to classify each element of the mini-batch based on the classes of other elements of the mini-batch, giving each one a weight of 1/(distance from classification target).<a href="#fn9" class="footnoteRef" id="fnref9"><sup>9</sup></a></p>
<p>Sadly, even with sophisticated architecture, using k-NN only gets down to 5-4% test error – and using simpler architectures gets worse results. However, I’ve put very little effort into playing with hyper-parameters.</p>
<p>Still, I really aesthetically like this approach, because it seems like what we’re “asking” the network to do is much more reasonable. We want points of the same manifold to be closer than points of others, as opposed to the manifolds being separable by a hyperplane. This should correspond to inflating the space between manifolds for different categories and contracting the individual manifolds. It feels like simplification.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Topological properties of data, such as links, may make it impossible to linearly separate classes using low-dimensional networks, regardless of depth. Even in cases where it is technically possible, such as spirals, it can be very challenging to do so.</p>
<p>To accurately classify data with neural networks, wide layers are sometimes necessary. Further, traditional neural network layers do not seem to be very good at representing important manipulations of manifolds; even if we were to cleverly set weights by hand, it would be challenging to compactly represent the transformations we want. New layers, specifically motivated by the manifold perspective of machine learning, may be useful supplements.</p>
<p><em>(This is a developing research project. It’s posted as an experiment in doing research openly. I would be delighted to have your feedback on these ideas: you can comment inline or at the end. For typos, technical errors, or clarifications you would like to see added, you are encouraged to make a pull request <a href="https://github.com/colah/NN-Topology-Post">on github</a>.)</em></p>
<h2 id="acknowledgments">Acknowledgments</h2>
<p>Thank you to Yoshua Bengio, Michael Nielsen, Dario Amodei, Eliana Lorch, Jacob Steinhardt, and Tamsyn Waterhouse for their comments and encouragement.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>This seems to have really kicked off with <a href="http://www.cs.toronto.edu/~fritz/absps/imagenet.pdf">Krizhevsky <em>et al.</em>, (2012)</a>, who put together a lot of different pieces to achieve outstanding results. Since then there’s been a lot of other exciting work.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>These representations, hopefully, make the data “nicer” for the network to classify. There has been a lot of work exploring representations recently. Perhaps the most fascinating has been in Natural Language Processing: the representations we learn of words, called word embeddings, have interesting properties. See <a href="http://research.microsoft.com/pubs/189726/rvecs.pdf">Mikolov <em>et al.</em> (2013)</a>, <a href="http://www.iro.umontreal.ca/~lisa/pointeurs/turian-wordrepresentations-acl10.pdf">Turian <em>et al.</em> (2010)</a>, and, <a href="http://www.socher.org/">Richard Socher’s work</a>. To give you a quick flavor, there is a <a href="http://metaoptimize.s3.amazonaws.com/cw-embeddings-ACL2010/embeddings-mostcommon.EMBEDDING_SIZE=50.png">very nice visualization</a> associated with the Turian paper.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>A lot of the natural transformations you might want to perform on an image, like translating or scaling an object in it, or changing the lighting, would form continuous curves in image space if you performed them continuously.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://comptop.stanford.edu/u/preprints/mumford.pdf">Carlsson <em>et al.</em></a> found that local patches of images form a klein bottle.<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><span class="math">\(GL_n(\mathbb{R})\)</span> is the set of invertible <span class="math">\(n \times n\)</span> matrices on the reals, formally called the <a href="http://en.wikipedia.org/wiki/General_linear_group">general linear group</a> of degree <span class="math">\(n\)</span>.<a href="#fnref5">↩</a></p></li>
<li id="fn6"><p>This result is mentioned in <a href="http://en.wikipedia.org/wiki/Whitney_embedding_theorem#Isotopy_versions">Wikipedia’s subsection on Isotopy versions</a>.<a href="#fnref6">↩</a></p></li>
<li id="fn7"><p>See <a href="http://cs.nyu.edu/~zaremba/docs/understanding.pdf">Szegedy <em>et al.</em></a>, where they are able to modify data samples and find slight modifications that cause some of the best image classification neural networks to misclasify the data. It’s quite troubling.<a href="#fnref7">↩</a></p></li>
<li id="fn8"><p>Contractive penalties were introduced in contractive autoencoders. See <a href="http://www.iro.umontreal.ca/~lisa/pointeurs/ICML2011_explicit_invariance.pdf">Rifai <em>et al.</em> (2011)</a>.<a href="#fnref8">↩</a></p></li>
<li id="fn9"><p>I used a slightly less elegant, but roughly equivalent algorithm because it was more practical to implement in Theano: feedforward two different batches at the same time, and classify them based on each other.<a href="#fnref9">↩</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Sun, 06 Apr 2014 00:00:00 UT</pubDate>
    <guid>http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/</guid>
</item>

    </channel> 
</rss>
